/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"time"

	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/log"

	finopsv1alpha1 "github.com/chrissam/k8s-scaling-operator/api/v1alpha1"
)

// +kubebuilder:rbac:groups=finops.devopsideas.com,resources=finopsscalepolicies,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=finops.devopsideas.com,resources=finopsscalepolicies/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=finops.devopsideas.com,resources=finopsscalepolicies/finalizers,verbs=update
// +kubebuilder:rbac:groups=finops.devopsideas.com,resources=finopsscalepolicies,verbs=get;list;watch;create;update;delete
// +kubebuilder:rbac:groups=finops.devopsideas.com,resources=finopsoperatorconfigs,verbs=get;list;update;patch;watch
// +kubebuilder:rbac:groups=core,resources=pods,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=core,resources=events,verbs=create;patch

// FinOpsScalePolicyReconciler reconciles a FinOpsScalePolicy object
type FinOpsScalePolicyReconciler struct {
	client.Client
	Scheme *runtime.Scheme
	Config *finopsv1alpha1.FinOpsOperatorConfig // Store global config in memory
}

// Load global FinOpsOperatorConfig into memory
func (r *FinOpsScalePolicyReconciler) loadConfig(ctx context.Context) error {
	log := log.FromContext(ctx)
	log.Info("Loading FinOpsOperatorConfig...")

	var configList finopsv1alpha1.FinOpsOperatorConfigList
	if err := r.List(ctx, &configList); err != nil {
		log.Error(err, "Failed to list FinOpsOperatorConfig")
		return err
	}

	if len(configList.Items) > 0 {
		r.Config = &configList.Items[0] // Store first found config in memory
		log.Info("Loaded FinOpsOperatorConfig", "config", r.Config.Name)
	} else {
		log.Info("No FinOpsOperatorConfig found, using default values")

		// Set default values in memory
		r.Config = &finopsv1alpha1.FinOpsOperatorConfig{
			Spec: finopsv1alpha1.FinOpsOperatorConfigSpec{
				ExcludedNamespaces:    []string{"kube-system", "kube-public", "kube-node-lease", "local-path-storage"},
				MaxParallelOperations: 5,
				CheckInterval:         "5m",
				ForceScaleDown:        false,
			},
		}
	}

	return nil
}

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the FinOpsScalePolicy object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.20.2/pkg/reconcile
func (r *FinOpsScalePolicyReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx).WithValues("Reconcile", req.NamespacedName)
	log.Info("Reconciling FinOpsScalePolicy...")

	// Load global FinOpsOperatorConfig (if not loaded already)
	if r.Config == nil {
		log.Info("Global config not loaded, attempting to load now...")
		if err := r.loadConfig(ctx); err != nil {
			log.Error(err, "Failed to load FinOpsOperatorConfig")
			return ctrl.Result{}, err
		}
	}

	// Check if this is a FinOpsOperatorConfig update event
	if req.NamespacedName.Name == "global-config" && req.NamespacedName.Namespace == "scaling-operator-system" {
		log.Info("Detected FinOpsOperatorConfig change, updating runtime settings")
		if err := r.loadConfig(ctx); err != nil {
			log.Error(err, "Failed to reload FinOpsOperatorConfig")
			return ctrl.Result{}, err
		}
		return ctrl.Result{}, nil // No need to reconcile deployments on config change
	}

	// Fetch the FinOpsScalePolicy CR
	var policy finopsv1alpha1.FinOpsScalePolicy
	if err := r.Get(ctx, req.NamespacedName, &policy); err != nil {
		log.Error(err, "Unable to fetch FinOpsScalePolicy, possibly deleted")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	log.Info("Successfully fetched FinOpsScalePolicy", "policy", policy.Name, "namespace", policy.Namespace)

	// Ignore excluded namespaces
	for _, ns := range r.Config.Spec.ExcludedNamespaces {
		if policy.Namespace == ns {
			log.Info("Skipping reconciliation due to namespace exclusion", "namespace", ns)
			return ctrl.Result{}, nil
		}
	}

	// Apply scaling logic based on new configuration...
	log.Info("Processing FinOpsScalePolicy logic...", "policyName", policy.Name, "namespace", policy.Namespace)
	// TODO(user) Apply scaling logic based on new configuration...

	// Convert CheckInterval from string to time.Duration
	interval, err := time.ParseDuration(r.Config.Spec.CheckInterval)
	if err != nil {
		log.Error(err, "Invalid CheckInterval value, using default 5m")
		interval = 5 * time.Minute // Default fallback
	}

	log.Info("The CheckInterval is set to", "CheckInterval", interval)

	return ctrl.Result{RequeueAfter: interval}, nil

}

// SetupWithManager sets up the controller with the Manager.
func (r *FinOpsScalePolicyReconciler) SetupWithManager(mgr ctrl.Manager) error {

	return ctrl.NewControllerManagedBy(mgr).
		For(&finopsv1alpha1.FinOpsScalePolicy{}).
		Named("finopsscalepolicy").
		Watches(&finopsv1alpha1.FinOpsOperatorConfig{}, &handler.EnqueueRequestForObject{}). // Watch for FinOpsOperatorConfig changes
		Complete(r)
}
