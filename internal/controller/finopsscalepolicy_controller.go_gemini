/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"
	"strings"
	"sync"
	"time"

	"github.com/robfig/cron/v3"
	appsv1 "k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/log"

	finopsv1alpha1 "github.com/chrissam/k8s-scaling-operator/api/v1alpha1"
)

// +kubebuilder:rbac:groups=finops.devopsideas.com,resources=finopsscalepolicies,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=finops.devopsideas.com,resources=finopsscalepolicies/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=finops.devopsideas.com,resources=finopsscalepolicies/finalizers,verbs=update
// +kubebuilder:rbac:groups=finops.devopsideas.com,resources=finopsscalepolicies,verbs=get;list;watch;create;update;delete
// +kubebuilder:rbac:groups=finops.devopsideas.com,resources=finopsoperatorconfigs,verbs=get;list;update;patch;watch
// +kubebuilder:rbac:groups=core,resources=pods,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=core,resources=events,verbs=create;patch

// FinOpsScalePolicyReconciler reconciles a FinOpsScalePolicy object
type FinOpsScalePolicyReconciler struct {
	client.Client
	Scheme *runtime.Scheme
	Config *finopsv1alpha1.FinOpsOperatorConfig // Store global config
	mutex  sync.Mutex                           // Protect concurrent Reconciles
	sem    chan struct{}                        // Semaphore for maxParallelOperations
}

// Load global FinOpsOperatorConfig into memory
func (r *FinOpsScalePolicyReconciler) loadConfig(ctx context.Context) error {
	log := log.FromContext(ctx)
	log.Info("Loading FinOpsOperatorConfig...")

	var configList finopsv1alpha1.FinOpsOperatorConfigList
	if err := r.List(ctx, &configList); err != nil {
		log.Error(err, "Failed to list FinOpsOperatorConfig")
		return err
	}

	if len(configList.Items) > 0 {
		r.Config = &configList.Items[0] // Store first found config
		log.Info("Loaded FinOpsOperatorConfig", "config", r.Config.Name)
	} else {
		log.Info("No FinOpsOperatorConfig found, using default values")

		// Set default values
		r.Config = &finopsv1alpha1.FinOpsOperatorConfig{
			Spec: finopsv1alpha1.FinOpsOperatorConfigSpec{
				ExcludedNamespaces:    []string{"kube-system", "kube-public", "kube-node-lease", "local-path-storage"},
				MaxParallelOperations: 5,
				CheckInterval:         "5m",
				ForceScaleDown:        false,
			},
		}
	}

	// Initialize semaphore
	r.sem = make(chan struct{}, r.Config.Spec.MaxParallelOperations)

	return nil
}

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
func (r *FinOpsScalePolicyReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx).WithValues("Reconcile", req.NamespacedName)

	r.mutex.Lock()
	defer r.mutex.Unlock()

	log.Info("Reconciling...")

	// Load global FinOpsOperatorConfig
	if r.Config == nil {
		if err := r.loadConfig(ctx); err != nil {
			log.Error(err, "Failed to load FinOpsOperatorConfig")
			return ctrl.Result{}, err
		}
	}

	// Handle FinOpsOperatorConfig changes
	if req.NamespacedName.Name == "global-config" && req.NamespacedName.Namespace == "scaling-operator-system" {
		log.Info("Detected FinOpsOperatorConfig change, updating settings")
		if err := r.loadConfig(ctx); err != nil {
			log.Error(err, "Failed to reload FinOpsOperatorConfig")
			return ctrl.Result{}, err
		}
		return ctrl.Result{}, nil
	}

	// Trigger periodic scan or specific namespace reconcile
	if req.NamespacedName.Name == "" && req.NamespacedName.Namespace == "" {
		return r.reconcileAllNamespaces(ctx)
	}

	return r.reconcileNamespace(ctx, req.NamespacedName.Namespace)
}

func (r *FinOpsScalePolicyReconciler) reconcileAllNamespaces(ctx context.Context) (ctrl.Result, error) {
	log := log.FromContext(ctx).WithValues("ReconcileAll", "cluster")
	log.Info("Starting cluster-wide scan...")

	var policies finopsv1alpha1.FinOpsScalePolicyList
	if err := r.List(ctx, &policies); err != nil {
		log.Error(err, "Failed to list FinOpsScalePolicies")
		return ctrl.Result{}, err
	}

	namespaces := map[string]bool{}
	for _, policy := range policies.Items {
		namespaces[policy.Namespace] = true
	}

	var wg sync.WaitGroup
	errChan := make(chan error, len(namespaces))

	for ns := range namespaces {
		wg.Add(1)
		go func(namespace string) {
			defer wg.Done()
			r.sem <- struct{}{}        // Acquire semaphore
			defer func() { <-r.sem }() // Release semaphore
			if err := r.reconcileNamespace(ctx, namespace); err != nil {
				errChan <- err
			}
		}(ns)
	}

	wg.Wait()
	close(errChan)

	for err := range errChan {
		if err != nil {
			log.Error(err, "Error during namespace reconciliation")
			return ctrl.Result{}, err // Or collect errors and return a combined error
		}
	}

	interval, err := time.ParseDuration(r.Config.Spec.CheckInterval)
	if err != nil {
		log.Error(err, "Invalid CheckInterval, using default 5m")
		interval = 5 * time.Minute
	}

	log.Info("Cluster-wide scan completed.", "CheckInterval", interval)
	return ctrl.Result{RequeueAfter: interval}, nil
}

func (r *FinOpsScalePolicyReconciler) reconcileNamespace(ctx context.Context, namespace string) error {
	log := log.FromContext(ctx).WithValues("ReconcileNamespace", namespace)
	log.Info("Processing namespace...")

	// Check namespace exclusion
	for _, excludedNS := range r.Config.Spec.ExcludedNamespaces {
		if namespace == excludedNS {
			log.Info("Skipping excluded namespace", "namespace", namespace)
			return nil
		}
	}

	var policies finopsv1alpha1.FinOpsScalePolicyList
	if err := r.List(ctx, &policies, client.InNamespace(namespace)); err != nil {
		log.Error(err, "Failed to list FinOpsScalePolicies in namespace", "namespace", namespace)
		return err
	}

	for _, policy := range policies.Items {
		if policy.Spec.OptOut {
			log.Info("OptOut is true, skipping scaling for this namespace", "namespace", namespace)
			return nil
		}

		var deployments appsv1.DeploymentList
		if err := r.List(ctx, &deployments, client.InNamespace(namespace)); err != nil {
			log.Error(err, "Failed to list deployments in namespace", "namespace", namespace)
			return err
		}

		for _, deployment := range deployments.Items {
			if r.isDeploymentExcluded(deployment.Namespace, deployment.Name) {
				log.Info("Skipping excluded deployment", "deployment", deployment.Name, "namespace", deployment.Namespace)
				continue
			}

			schedule := policy.Spec.DefaultSchedule
			minReplicas := int32(1) // Default
			for _, depPolicy := range policy.Spec.Deployments {
				if depPolicy.Name == deployment.Name {
					schedule = depPolicy.Schedule
					minReplicas = int32(depPolicy.MinReplicas)
					break
				}
			}

			if schedule != "" && r.isScalingTime(schedule, policy.Spec.Timezone) {
				if err := r.scaleDeployment(ctx, &deployment, minReplicas); err != nil {
					log.Error(err, "Failed to scale deployment", "deployment", deployment.Name, "namespace", deployment.Namespace)
					return err
				}
				log.Info("Successfully scaled deployment", "deployment", deployment.Name, "namespace", deployment.Namespace, "minReplicas", minReplicas)
			} else {
				log.Info("No scaling required for deployment", "deployment", deployment.Name, "namespace", deployment.Namespace)
			}
		}
	}
	return nil
}

// isDeploymentExcluded checks if a deployment is globally excluded
func (r *FinOpsScalePolicyReconciler) isDeploymentExcluded(namespace, name string) bool {
	for _, excluded := range r.Config.Spec.ExcludedDeployments {
		if excluded.Namespace == namespace && excluded.Name == name {
			return true
		}
	}
	return false
}

// isScalingTime checks if the current time is within the scaling schedule
func (r *FinOpsScalePolicyReconciler) isScalingTime(schedule, timezone string) bool {
	if schedule == "" {
		return false
	}

	now := time.Now()
	loc, err := time.LoadLocation(timezone)
	if err == nil {
		now = now.In(loc)
	}

	cronSchedule, err := parseSchedule(schedule)
	if err != nil {
		return false
	}

	nextRun := cronSchedule.Next(now.Add(-time.Minute))
	prevRun := cronSchedule.Prev(now.Add(time.Minute))

	return now.After(prevRun) && now.Before(nextRun)
}

// scaleDeployment scales a deployment to the specified number of replicas
func (r *FinOpsScalePolicyReconciler) scaleDeployment(ctx context.Context, deployment *appsv1.Deployment, minReplicas int32) error {
	log := log.FromContext(ctx)

	if *deployment.Spec.Replicas <= minReplicas {
		log.Info("Deployment already at or below minReplicas", "deployment", deployment.Name, "currentReplicas", *deployment.Spec.Replicas, "minReplicas", minReplicas)
		return nil
	}

	patch := client.MergeFrom(deployment.DeepCopy())
	deployment.Spec.Replicas = &minReplicas
	if err := r.Patch(ctx, deployment, patch); err != nil {
		return err
	}

	return nil
}

func parseSchedule(schedule string) (cron.Schedule, error) {
	parts := strings.Split(schedule, "-")
	if len(parts) != 2 {
		return nil, fmt.Errorf("invalid schedule format: %s", schedule)
	}

	start, end := parts[0], parts[1]
	cronScheduleString := fmt.Sprintf("0 %s-%s * * *", start, end)

	parser := cron.NewParser(cron.Minute | cron.Hour | cron.Dom | cron.Month | cron.Dow)
	cronSchedule, err := parser.Parse(cronScheduleString)
	if err != nil {
		return nil, fmt.Errorf("invalid cron schedule: %s", cronScheduleString)
	}

	return cronSchedule, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *FinOpsScalePolicyReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&finopsv1alpha1.FinOpsScalePolicy{}).
		Named("finopsscalepolicy").
		Watches(&finopsv1alpha1.FinOpsOperatorConfig{}, &handler.EnqueueRequestForObject{}).
		Complete(r)
}
